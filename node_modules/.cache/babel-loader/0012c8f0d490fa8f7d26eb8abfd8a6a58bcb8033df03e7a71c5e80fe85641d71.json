{"ast":null,"code":"/* eslint-disable no-restricted-globals */// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\nimport{clientsClaim}from'workbox-core';import{ExpirationPlugin}from'workbox-expiration';import{precacheAndRoute,createHandlerBoundToURL}from'workbox-precaching';import{registerRoute}from'workbox-routing';import{StaleWhileRevalidate}from'workbox-strategies';// Definindo as constantes no topo do arquivo\nconst CACHE_NAME='my-pwa-cache-v1';const urlsToCache=['/','/index.html','/static/js/bundle.js','/static/js/main.chunk.js','/static/js/0.chunk.js','/static/css/main.chunk.css','/manifest.json','/logo192.png','/logo512.png','/favicon.ico'];clientsClaim();// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nconst fileExtensionRegexp=new RegExp('/[^/?]+\\\\.[^/]+$');registerRoute(// Return false to exempt requests from being fulfilled by index.html.\n_ref=>{let{request,url}=_ref;// If this isn't a navigation, skip.\nif(request.mode!=='navigate'){return false;}// If this is a URL that starts with /_, skip.\nif(url.pathname.startsWith('/_')){return false;}// If this looks like a URL for a resource, because it contains // a file extension, skip.\nif(url.pathname.match(fileExtensionRegexp)){return false;}// Return true to signal that we want to use the handler.\nreturn true;},createHandlerBoundToURL(process.env.PUBLIC_URL+'/index.html'));// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(// Add in any other file extensions or routing criteria as needed.\n_ref2=>{let{url}=_ref2;return url.origin===self.location.origin&&url.pathname.endsWith('.png');},// Customize this strategy as needed, e.g., by changing to CacheFirst.\nnew StaleWhileRevalidate({cacheName:'images',plugins:[// Ensure that once this runtime cache reaches a maximum size the\n// least-recently used images are removed.\nnew ExpirationPlugin({maxEntries:50})]}));// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message',event=>{if(event.data&&event.data.type==='SKIP_WAITING'){self.skipWaiting();}});self.addEventListener('install',event=>{event.waitUntil(caches.open(CACHE_NAME).then(cache=>{console.log('Opened cache');return cache.addAll(urlsToCache);}));});self.addEventListener('fetch',event=>{event.respondWith(caches.match(event.request).then(response=>{// Cache hit - return response\nif(response){return response;}return fetch(event.request);}));});self.addEventListener('activate',event=>{const cacheWhitelist=[CACHE_NAME];event.waitUntil(caches.keys().then(cacheNames=>{return Promise.all(cacheNames.map(cacheName=>{if(cacheWhitelist.indexOf(cacheName)===-1){return caches.delete(cacheName);}}));}));});// Any other custom service worker logic can go here.","map":{"version":3,"names":["clientsClaim","ExpirationPlugin","precacheAndRoute","createHandlerBoundToURL","registerRoute","StaleWhileRevalidate","CACHE_NAME","urlsToCache","self","__WB_MANIFEST","fileExtensionRegexp","RegExp","_ref","request","url","mode","pathname","startsWith","match","process","env","PUBLIC_URL","_ref2","origin","location","endsWith","cacheName","plugins","maxEntries","addEventListener","event","data","type","skipWaiting","waitUntil","caches","open","then","cache","console","log","addAll","respondWith","response","fetch","cacheWhitelist","keys","cacheNames","Promise","all","map","indexOf","delete"],"sources":["D:/Projetos/PWA/npass-teste-pwa/src/service-worker.js"],"sourcesContent":["\n\n/* eslint-disable no-restricted-globals */\n\n// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\n\nimport { clientsClaim } from 'workbox-core';\nimport { ExpirationPlugin } from 'workbox-expiration';\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\nimport { registerRoute } from 'workbox-routing';\nimport { StaleWhileRevalidate } from 'workbox-strategies';\n\n// Definindo as constantes no topo do arquivo\nconst CACHE_NAME = 'my-pwa-cache-v1';\nconst urlsToCache = [\n  '/',\n  '/index.html',\n  '/static/js/bundle.js',\n  '/static/js/main.chunk.js',\n  '/static/js/0.chunk.js',\n  '/static/css/main.chunk.css',\n  '/manifest.json',\n  '/logo192.png',\n  '/logo512.png',\n  '/favicon.ico'\n];\n\nclientsClaim();\n\n// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);\n\n// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\nregisterRoute(\n  // Return false to exempt requests from being fulfilled by index.html.\n  ({ request, url }) => {\n    // If this isn't a navigation, skip.\n    if (request.mode !== 'navigate') {\n      return false;\n    } // If this is a URL that starts with /_, skip.\n\n    if (url.pathname.startsWith('/_')) {\n      return false;\n    } // If this looks like a URL for a resource, because it contains // a file extension, skip.\n\n    if (url.pathname.match(fileExtensionRegexp)) {\n      return false;\n    } // Return true to signal that we want to use the handler.\n\n    return true;\n  },\n  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\n);\n\n// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(\n  // Add in any other file extensions or routing criteria as needed.\n  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.\n  new StaleWhileRevalidate({\n    cacheName: 'images',\n    plugins: [\n      // Ensure that once this runtime cache reaches a maximum size the\n      // least-recently used images are removed.\n      new ExpirationPlugin({ maxEntries: 50 }),\n    ],\n  })\n);\n\n// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n});\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Cache hit - return response\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      })\n  );\n});\n\nself.addEventListener('activate', (event) => {\n  const cacheWhitelist = [CACHE_NAME];\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Any other custom service worker logic can go here.\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}